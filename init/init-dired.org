* Defaults
better defaults
#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
  (setq dired-recursive-copies 'always)
  (setq dired-recursive-deletes 'always)
  (setq dired-dwim-target t)
#+END_SRC

在单个buffer里打开文件：
#+BEGIN_SRC emacs-lisp
    (put 'dired-find-alternate-file 'disabled nil)
    (with-eval-after-load 'dired
      (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
      (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file ".."))))  ; was dired-up-directory)

#+END_SRC

忽略文件:
#+BEGIN_SRC emacs-lisp
  (setq-default dired-omit-files-p t)
  (setq dired-omit-files
        (concat dired-omit-files "\\.pyc$\\|.DS_Store"))
#+END_SRC

dired会被加入recentf-list:
#+BEGIN_SRC emacs-lisp
  (defun recentd-track-opened-file ()
    "Insert the name of the directory just opened into the recent list."
    (and (derived-mode-p 'dired-mode)
         (not (bound-and-true-p tramp-mode))
         default-directory
         (recentf-add-file default-directory))
    ;; Must return nil because it is run from `write-file-functions'.
    nil)


  (defun recentd-track-closed-file ()
    "Update the recent list when a dired buffer is killed.
    That is, remove a non kept dired from the recent list."
    (and (derived-mode-p 'dired-mode)
         default-directory
         (recentf-remove-if-non-kept default-directory)))

  (add-hook 'dired-after-readin-hook 'recentd-track-opened-file)
  (add-hook 'kill-buffer-hook 'recentd-track-closed-file)
#+END_SRC

* Packages
** dired+
#+BEGIN_SRC emacs-lisp
  ;; (require-package 'dired+)
  (add-to-list 'load-path (expand-file-name "dired+" user-emacs-directory))
  (require 'dired+)
  
  ;; only use one buffer
  (diredp-toggle-find-file-reuse-dir 1)
#+END_SRC
** diryed-icon
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'dired-mode-hook 'dired-icon-mode)
#+END_SRC
** diredful
#+BEGIN_SRC emacs-lisp
  (require-package 'diredful)
  (diredful-mode 1)
#+END_SRC
** stripe-buffer
#+BEGIN_SRC emacs-lisp
  (require-package 'stripe-buffer)
  (add-hook 'dired-mode-hook 'turn-on-stripe-buffer-mode)
#+END_SRC
** ivy-dired-history
#+BEGIN_SRC emacs-lisp
  ;; (require-package 'ivy-dired-history)
  ;; (require 'savehist)
  ;; (add-to-list 'savehist-additional-variables 'ivy-dired-history-variable)
  ;; (savehist-mode 1)

  ;; (with-eval-after-load 'dired
  ;;   (require 'ivy-dired-history)
  ;;   ;; if you are using ido,you'd better disable ido for dired
  ;;   ;; (define-key (cdr ido-minor-mode-map-entry) [remap dired] nil) ;in ido-setup-hook
  ;;   (define-key dired-mode-map "," 'dired))
#+END_SRC

* Inside
#+BEGIN_SRC emacs-lisp
    (defun custom-dired-open-file-with-osx ()
      "In Dired, try to open files by osx"
      (interactive)
      (shell-command (format "open \"%s\"" (dired-get-file-for-visit))))

    (defun custom-dired-temp-hide-files ()
      "Hide marked files temporary."
      (interactive)
      (make-local-variable 'dired-omit-files)
      (dolist (item (dired-get-marked-files))
        (setq dired-omit-files
              (concat dired-omit-files (format "\\|%s" (file-name-nondirectory item)))))
      (dired-unmark-all-marks)
      (revert-buffer))

    (define-key dired-mode-map (kbd "H") 'custom-dired-temp-hide-files)
    (define-key dired-mode-map (kbd "O") 'custom-dired-open-file-with-osx)
    (define-key dired-mode-map (kbd "V") nil)
    (define-key dired-mode-map (kbd "e") 'wdired-change-to-wdired-mode)

    (add-hook 'view-mode-hook '(lambda () (evil-define-key 'normal view-mode-map (kbd "q") 'View-quit)))

#+END_SRC
** sort
使用ls-lisp，解决MacOS不支持ls -X排序的问题。
#+BEGIN_SRC emacs-lisp
  (require 'ls-lisp)
  (setq ls-lisp-use-insert-directory-program nil)
  (setq ls-lisp-verbosity nil)
#+END_SRC

目录在文件前面：
#+BEGIN_SRC emacs-lisp
  (defun custom-dired-sort-dir-first ()
    "Dired sort hook to list directories first."
    (save-excursion
      (let (buffer-read-only)
        (forward-line 2) ;; beyond dir. header
        (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max))))
    (and (featurep 'xemacs)
         (fboundp 'dired-insert-set-properties)
         (dired-insert-set-properties (point-min) (point-max)))
    (set-buffer-modified-p nil))

  (add-hook 'dired-after-readin-hook 'custom-dired-sort-dir-first)
#+END_SRC

自定义s排序：
#+BEGIN_SRC emacs-lisp
  (setq custom-dired-sort-seq-list `((,(concat dired-listing-switches "h") . "Name")
                                     (,(concat dired-listing-switches "cth") . "Create Time")
                                     (,(concat dired-listing-switches "uth") . "Modify Time")
                                     (,(concat dired-listing-switches "Xh") . "Extension")
                                     (,(concat dired-listing-switches "Sh") . "Size")))

  (defun custom-dired-sort-next ()
    "In dired mode, sort"
    (interactive)
    (let ((nextpos (1+ (or (cl-position
                            (assoc dired-actual-switches custom-dired-sort-seq-list)
                            custom-dired-sort-seq-list :test 'equal) 0))))
      (when (= (length custom-dired-sort-seq-list) nextpos)
        (setq nextpos 0))
      (dired-sort-other (car (car (nthcdr nextpos custom-dired-sort-seq-list))))
      (message "SORTBY - \"%s\"" (cdr (car (nthcdr nextpos custom-dired-sort-seq-list))))))

  (define-key dired-mode-map (kbd "s") 'custom-dired-sort-next)

#+END_SRC

* Outside
#+BEGIN_SRC emacs-lisp
    (require-package 'ivy)
    (require 'ivy) ; swiper 7.0+ should be installed

    (defun custom-goto-recent-directory ()
      "Open recent directory with dired; add z cmd list to this"
      (interactive)
      (unless recentf-mode (recentf-mode 1))
      (let ((collection
             (delete-dups
              (append
               (delq nil (mapcar (lambda (filename) ; recentf
                                   (let ((directory (file-name-directory filename)))
                                     (and (not (file-remote-p directory)) (file-exists-p directory) directory)))
                                 recentf-list))
               (mapcar (lambda (directory) ; finder recent
                         (and (file-exists-p directory) (concat directory "/")))
                       (split-string (shell-command-to-string (format "python %s/init/osx-recent-dir.py" user-emacs-directory)) "\n" t))
               (when (file-exists-p "~/.z") ; append lines from z; append top 20 dirs
                 (mapcar (lambda (directory)
                           (and (file-exists-p directory) (concat directory "/")))
                         (split-string (shell-command-to-string "cat ~/.z | sort -r -n -k 2 -t \"|\" | cut -f 1 -d \"|\" | head -n 20") "\n" t)))
  ))))
        (ivy-read "directories:" collection :action 'dired)))

    (defun custom-goto-finder-directory ()
      "Open OSX Finder path with dired"
      (interactive)
      (dired (file-name-as-directory (s-trim (shell-command-to-string "osascript -e \'tell app \"Finder\" to POSIX path of (insertion location as alias)\'")))))

    (defun slegetank/goto-xcode-project ()
      "Open current XCode project path with dired"
      (interactive)
      (dired (file-name-as-directory (file-name-directory (s-trim (shell-command-to-string "osascript -e 'tell application id \"com.apple.dt.Xcode\" to return path of document 1'"))))))


    (defun slegetank/goto-android-project ()
      "Open current XCode project path with magit"
      (interactive)
      (let ((cmd-result (shell-command-to-string "osascript -e 'tell application \"System Events\" to get the {title} of window 1 of process \"Android Studio\"'")))
        (if cmd-result
            (dired (file-name-as-directory (file-name-directory (s-chop-suffix "]"
                                                                               (s-chop-prefix "["
                                                                                              (car
                                                                                               (s-match "\\[.*?\\]" (s-trim cmd-result))))))))
          (message "Found no android project."))))

    (defun custom-open-xcode-file ()
      "Open current XCode editing file with emacs"
      (interactive)
      (find-file (s-trim (shell-command-to-string "osascript -e 'tell application id \"com.apple.dt.Xcode\" to return path of last item of source documents'"))))

    (require 'bookmark)
    (defun custom-ido-bookmark-jump ()
      "Jump to bookmark using ido"
      (interactive)
      (let ((dir (custom-ido-get-bookmark-dir)))
        (when dir
          (find-alternate-file dir))))

    (defun custom-ido-get-bookmark-dir ()
      "Get the directory of a bookmark."
      (let* ((name (ido-completing-read "Use dir of bookmark: " (bookmark-all-names) nil t))
             (bmk (bookmark-get-bookmark name)))
        (when bmk
          (setq bookmark-alist (delete bmk bookmark-alist))
          (push bmk bookmark-alist)
          (let ((filename (bookmark-get-filename bmk)))
            (if (file-directory-p filename)
                filename
              (file-name-directory filename))))))

    (evil-leader/set-key
      "dd" 'dired-jump
      "do" 'dired-jump-other-window
      "dr" 'custom-goto-recent-directory
      "df" 'custom-goto-finder-directory
      "dx" 'slegetank/goto-xcode-project
      "da" 'slegetank/goto-android-project
      "fx" 'custom-open-xcode-file
      "dm" 'custom-ido-bookmark-jump)

#+END_SRC
